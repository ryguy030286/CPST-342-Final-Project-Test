(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular-fittext', ['exports', '@angular/core'], factory) :
    (factory((global['angular-fittext'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AngularFittextDirective = (function () {
        function AngularFittextDirective(el, renderer) {
            var _this = this;
            this.el = el;
            this.renderer = renderer;
            this.fittext = true;
            this.compression = 1;
            this.activateOnResize = true;
            this.minFontSize = 0;
            this.maxFontSize = Number.POSITIVE_INFINITY;
            this.delay = 100;
            this.fontUnit = 'px';
            this.calcSize = 10;
            this.onWindowResize = function () {
                if (_this.activateOnResize) {
                    _this.setFontSize();
                }
            };
            this.setFontSize = function () {
                _this.resizeTimeout = setTimeout((function () {
                    if (_this.fittextElement.offsetHeight * _this.fittextElement.offsetWidth !== 0) {
                        // reset to default
                        // reset to default
                        _this.setStyles(_this.calcSize, 1, 'inline-block');
                        // set new
                        // set new
                        _this.setStyles(_this.calculateNewFontSize(), _this.lineHeight, _this.display);
                    }
                }).bind(_this), _this.delay);
            };
            this.calculateNewFontSize = function () {
                var /** @type {?} */ ratio = (_this.calcSize * _this.newlines) / _this.fittextElement.offsetWidth / _this.newlines;
                return Math.max(Math.min((_this.fittextParent.offsetWidth -
                    (parseFloat(getComputedStyle(_this.fittextParent).paddingLeft) +
                        parseFloat(getComputedStyle(_this.fittextParent).paddingRight)) -
                    6) *
                    ratio *
                    _this.compression, _this.fittextMaxFontSize), _this.fittextMinFontSize);
            };
            this.setStyles = function (fontSize, lineHeight, display) {
                _this.renderer.setStyle(_this.fittextElement, 'fontSize', fontSize.toString() + _this.fontUnit);
                _this.renderer.setStyle(_this.fittextElement, 'lineHeight', lineHeight.toString());
                _this.renderer.setStyle(_this.fittextElement, 'display', display);
            };
            this.fittextElement = el.nativeElement;
            this.fittextParent = this.fittextElement.parentElement;
            this.computed = window.getComputedStyle(this.fittextElement);
            this.newlines = this.fittextElement.childElementCount > 0 ? this.fittextElement.childElementCount : 1;
            this.lineHeight = this.computed['line-height'];
            this.display = this.computed['display'];
        }
        /**
         * @return {?}
         */
        AngularFittextDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.fittextMinFontSize = this.minFontSize === 'inherit' ? this.computed['font-size'] : this.minFontSize;
                this.fittextMaxFontSize = this.maxFontSize === 'inherit' ? this.computed['font-size'] : this.maxFontSize;
            };
        /**
         * @return {?}
         */
        AngularFittextDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.setFontSize();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        AngularFittextDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['compression'] && !changes['compression'].firstChange) {
                    this.setFontSize();
                }
                if (changes['ngModel']) {
                    this.fittextElement.innerHTML = this.ngModel;
                    this.setFontSize();
                }
            };
        AngularFittextDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[fittext]'
                    },] },
        ];
        /** @nocollapse */
        AngularFittextDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer2, },
            ];
        };
        AngularFittextDirective.propDecorators = {
            "fittext": [{ type: core.Input },],
            "compression": [{ type: core.Input },],
            "activateOnResize": [{ type: core.Input },],
            "minFontSize": [{ type: core.Input },],
            "maxFontSize": [{ type: core.Input },],
            "delay": [{ type: core.Input },],
            "ngModel": [{ type: core.Input },],
            "fontUnit": [{ type: core.Input },],
            "onWindowResize": [{ type: core.HostListener, args: ['window:resize',] },],
        };
        return AngularFittextDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AngularFittextModule = (function () {
        function AngularFittextModule() {
        }
        AngularFittextModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            AngularFittextDirective
                        ],
                        exports: [
                            AngularFittextDirective
                        ]
                    },] },
        ];
        return AngularFittextModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.AngularFittextModule = AngularFittextModule;
    exports.AngularFittextDirective = AngularFittextDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,