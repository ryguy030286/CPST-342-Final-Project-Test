{"version":3,"sources":["ng://angular-fittext/src/angular-fittext.directive.ts","ng://angular-fittext/src/angular-fittext.module.ts"],"names":["AngularFittextDirective","el","renderer","_this","this","Number","POSITIVE_INFINITY","activateOnResize","setFontSize","resizeTimeout","setTimeout","fittextElement","offsetHeight","offsetWidth","setStyles","calcSize","calculateNewFontSize","lineHeight","display","bind","delay","ratio","newlines","Math","max","min","fittextParent","parseFloat","getComputedStyle","paddingLeft","paddingRight","compression","fittextMaxFontSize","fittextMinFontSize","fontSize","setStyle","toString","fontUnit","nativeElement","parentElement","computed","window","childElementCount","prototype","ngOnInit","minFontSize","maxFontSize","ngAfterViewInit","ngOnChanges","changes","firstChange","innerHTML","ngModel","Directive","args","selector","ElementRef","Renderer2","Input","HostListener","AngularFittextModule","NgModule","declarations","exports"],"mappings":"4QAAA,IAAAA,EAAA,WA2BE,SAAAA,EACUC,EACAC,GAFV,IAAAC,EAAAC,KACUA,KAAAH,GAAAA,EACAG,KAAAF,SAAAA,gBAtBU,mBACI,yBACK,mBACe,mBACAG,OAAOC,6BACjC,kBAEyB,mBAUxB,uBAgBK,WAClBH,EAAKI,kBACPJ,EAAKK,gCAuBa,WACpBL,EAAKM,cAAgBC,WACnB,WACMP,EAAKQ,eAAeC,aAAeT,EAAKQ,eAAeE,aAAgB,IAEzEV,EAAKW,UAAUX,EAAKY,SAAU,EAAG,gBAEjCZ,EAAKW,UAAUX,EAAKa,uBAAwBb,EAAKc,WAAYd,EAAKe,WAEnEC,KAAKhB,GACRA,EAAKiB,kCAIsB,WAC7B,IAAMC,EAASlB,EAAKY,SAAWZ,EAAKmB,SAAYnB,EAAKQ,eAAeE,YAAcV,EAAKmB,SAEvF,OAAOC,KAAKC,IACVD,KAAKE,KACFtB,EAAKuB,cAAcb,aACjBc,WAAWC,iBAAiBzB,EAAKuB,eAAeG,aAC/CF,WAAWC,iBAAiBzB,EAAKuB,eAAeI,eAClD,GACFT,EACAlB,EAAK4B,YACL5B,EAAK6B,oBAEP7B,EAAK8B,oCAIW,SAACC,EAAkBjB,EAA6BC,GAClEf,EAAKD,SAASiC,SAAShC,EAAKQ,eAAgB,WAAYuB,EAASE,WAAajC,EAAKkC,UACnFlC,EAAKD,SAASiC,SAAShC,EAAKQ,eAAgB,aAAcM,EAAWmB,YACrEjC,EAAKD,SAASiC,SAAShC,EAAKQ,eAAgB,UAAWO,IApEvDd,KAAKO,eAAiBV,EAAGqC,cACzBlC,KAAKsB,cAAgBtB,KAAKO,eAAe4B,cACzCnC,KAAKoC,SAAWC,OAAOb,iBAAiBxB,KAAKO,gBAC7CP,KAAKkB,SAAmD,EAAxClB,KAAKO,eAAe+B,kBAAwBtC,KAAKO,eAAe+B,kBAAoB,EACpGtC,KAAKa,WAAab,KAAKoC,SAAS,eAChCpC,KAAKc,QAAUd,KAAKoC,SAAkB,eAUjCxC,EAAA2C,UAAAC,oBACLxC,KAAK6B,mBAA0C,YAArB7B,KAAKyC,YAA4BzC,KAAKoC,SAAS,aAAepC,KAAKyC,YAC7FzC,KAAK4B,mBAA0C,YAArB5B,KAAK0C,YAA4B1C,KAAKoC,SAAS,aAAepC,KAAK0C,aAGxF9C,EAAA2C,UAAAI,2BACL3C,KAAKI,eAGAR,EAAA2C,UAAAK,qBAAYC,GACbA,EAAqB,cAAMA,EAAqB,YAAEC,aACpD9C,KAAKI,cAEHyC,EAAiB,UACnB7C,KAAKO,eAAewC,UAAY/C,KAAKgD,QACrChD,KAAKI,oCA3DV6C,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,yDAHsBC,EAAAA,kBAAoDC,EAAAA,8CAOnFC,EAAAA,2BACAA,EAAAA,gCACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,wBACAA,EAAAA,8BAyBAC,EAAAA,aAAYL,KAAA,CAAC,sBAvChB,GCAAM,EAAA,oDAICC,EAAAA,SAAQP,KAAA,CAAC,CACRQ,aAAc,CACZ9D,GAEF+D,QAAS,CACP/D,SATJ","sourcesContent":["import {AfterViewInit, Directive, ElementRef, HostListener, Input, OnChanges, OnInit, Renderer2, SimpleChanges} from '@angular/core';\n\n@Directive({\n  selector: '[fittext]'\n})\nexport class AngularFittextDirective implements AfterViewInit, OnInit, OnChanges {\n\n  @Input() fittext? = true;\n  @Input() compression? = 1;\n  @Input() activateOnResize? = true;\n  @Input() minFontSize?: number | 'inherit' = 0;\n  @Input() maxFontSize?: number | 'inherit' = Number.POSITIVE_INFINITY;\n  @Input() delay? = 100;\n  @Input() ngModel;\n  @Input() fontUnit?: 'px' | 'em' | string = 'px';\n\n  private fittextParent: HTMLElement;\n  private fittextElement: HTMLElement;\n  private fittextMinFontSize: number;\n  private fittextMaxFontSize: number;\n  private computed: CSSStyleDeclaration;\n  private newlines: number;\n  private lineHeight: string;\n  private display: string;\n  private calcSize = 10;\n  private resizeTimeout: number;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2\n  ) {\n    this.fittextElement = el.nativeElement;\n    this.fittextParent = this.fittextElement.parentElement;\n    this.computed = window.getComputedStyle(this.fittextElement);\n    this.newlines = this.fittextElement.childElementCount > 0 ? this.fittextElement.childElementCount : 1;\n    this.lineHeight = this.computed['line-height'];\n    this.display = this.computed['display'];\n  }\n\n  @HostListener('window:resize')\n  public onWindowResize = (): void => {\n    if (this.activateOnResize) {\n      this.setFontSize();\n    }\n  };\n\n  public ngOnInit() {\n    this.fittextMinFontSize = this.minFontSize === 'inherit' ? this.computed['font-size'] : this.minFontSize;\n    this.fittextMaxFontSize = this.maxFontSize === 'inherit' ? this.computed['font-size'] : this.maxFontSize;\n  }\n\n  public ngAfterViewInit() {\n    this.setFontSize();\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes['compression'] && !changes['compression'].firstChange) {\n      this.setFontSize();\n    }\n    if (changes['ngModel']) {\n      this.fittextElement.innerHTML = this.ngModel;\n      this.setFontSize();\n    }\n  }\n\n  private setFontSize = (): void => {\n    this.resizeTimeout = setTimeout(\n      (() => {\n        if (this.fittextElement.offsetHeight * this.fittextElement.offsetWidth !== 0) {\n          // reset to default\n          this.setStyles(this.calcSize, 1, 'inline-block');\n          // set new\n          this.setStyles(this.calculateNewFontSize(), this.lineHeight, this.display);\n        }\n      }).bind(this),\n      this.delay\n    );\n  };\n\n  private calculateNewFontSize = (): number => {\n    const ratio = (this.calcSize * this.newlines) / this.fittextElement.offsetWidth / this.newlines;\n\n    return Math.max(\n      Math.min(\n        (this.fittextParent.offsetWidth -\n          (parseFloat(getComputedStyle(this.fittextParent).paddingLeft) +\n            parseFloat(getComputedStyle(this.fittextParent).paddingRight)) -\n          6) *\n        ratio *\n        this.compression,\n        this.fittextMaxFontSize\n      ),\n      this.fittextMinFontSize\n    );\n  };\n\n  private setStyles = (fontSize: number, lineHeight: number | string, display: string): void => {\n    this.renderer.setStyle(this.fittextElement, 'fontSize', fontSize.toString() + this.fontUnit);\n    this.renderer.setStyle(this.fittextElement, 'lineHeight', lineHeight.toString());\n    this.renderer.setStyle(this.fittextElement, 'display', display);\n  };\n}\n","import {NgModule} from '@angular/core';\nimport {AngularFittextDirective} from './angular-fittext.directive';\n\n\n@NgModule({\n  declarations: [\n    AngularFittextDirective\n  ],\n  exports: [\n    AngularFittextDirective\n  ]\n})\n\nexport class AngularFittextModule {\n}\n"]}