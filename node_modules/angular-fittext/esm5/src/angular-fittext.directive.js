/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
var AngularFittextDirective = /** @class */ (function () {
    function AngularFittextDirective(el, renderer) {
        var _this = this;
        this.el = el;
        this.renderer = renderer;
        this.fittext = true;
        this.compression = 1;
        this.activateOnResize = true;
        this.minFontSize = 0;
        this.maxFontSize = Number.POSITIVE_INFINITY;
        this.delay = 100;
        this.fontUnit = 'px';
        this.calcSize = 10;
        this.onWindowResize = function () {
            if (_this.activateOnResize) {
                _this.setFontSize();
            }
        };
        this.setFontSize = function () {
            _this.resizeTimeout = setTimeout((function () {
                if (_this.fittextElement.offsetHeight * _this.fittextElement.offsetWidth !== 0) {
                    // reset to default
                    // reset to default
                    _this.setStyles(_this.calcSize, 1, 'inline-block');
                    // set new
                    // set new
                    _this.setStyles(_this.calculateNewFontSize(), _this.lineHeight, _this.display);
                }
            }).bind(_this), _this.delay);
        };
        this.calculateNewFontSize = function () {
            var /** @type {?} */ ratio = (_this.calcSize * _this.newlines) / _this.fittextElement.offsetWidth / _this.newlines;
            return Math.max(Math.min((_this.fittextParent.offsetWidth -
                (parseFloat(getComputedStyle(_this.fittextParent).paddingLeft) +
                    parseFloat(getComputedStyle(_this.fittextParent).paddingRight)) -
                6) *
                ratio *
                _this.compression, _this.fittextMaxFontSize), _this.fittextMinFontSize);
        };
        this.setStyles = function (fontSize, lineHeight, display) {
            _this.renderer.setStyle(_this.fittextElement, 'fontSize', fontSize.toString() + _this.fontUnit);
            _this.renderer.setStyle(_this.fittextElement, 'lineHeight', lineHeight.toString());
            _this.renderer.setStyle(_this.fittextElement, 'display', display);
        };
        this.fittextElement = el.nativeElement;
        this.fittextParent = this.fittextElement.parentElement;
        this.computed = window.getComputedStyle(this.fittextElement);
        this.newlines = this.fittextElement.childElementCount > 0 ? this.fittextElement.childElementCount : 1;
        this.lineHeight = this.computed['line-height'];
        this.display = this.computed['display'];
    }
    /**
     * @return {?}
     */
    AngularFittextDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.fittextMinFontSize = this.minFontSize === 'inherit' ? this.computed['font-size'] : this.minFontSize;
        this.fittextMaxFontSize = this.maxFontSize === 'inherit' ? this.computed['font-size'] : this.maxFontSize;
    };
    /**
     * @return {?}
     */
    AngularFittextDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setFontSize();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AngularFittextDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['compression'] && !changes['compression'].firstChange) {
            this.setFontSize();
        }
        if (changes['ngModel']) {
            this.fittextElement.innerHTML = this.ngModel;
            this.setFontSize();
        }
    };
    AngularFittextDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fittext]'
                },] },
    ];
    /** @nocollapse */
    AngularFittextDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    AngularFittextDirective.propDecorators = {
        "fittext": [{ type: Input },],
        "compression": [{ type: Input },],
        "activateOnResize": [{ type: Input },],
        "minFontSize": [{ type: Input },],
        "maxFontSize": [{ type: Input },],
        "delay": [{ type: Input },],
        "ngModel": [{ type: Input },],
        "fontUnit": [{ type: Input },],
        "onWindowResize": [{ type: HostListener, args: ['window:resize',] },],
    };
    return AngularFittextDirective;
}());
export { AngularFittextDirective };
function AngularFittextDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AngularFittextDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AngularFittextDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    AngularFittextDirective.propDecorators;
    /** @type {?} */
    AngularFittextDirective.prototype.fittext;
    /** @type {?} */
    AngularFittextDirective.prototype.compression;
    /** @type {?} */
    AngularFittextDirective.prototype.activateOnResize;
    /** @type {?} */
    AngularFittextDirective.prototype.minFontSize;
    /** @type {?} */
    AngularFittextDirective.prototype.maxFontSize;
    /** @type {?} */
    AngularFittextDirective.prototype.delay;
    /** @type {?} */
    AngularFittextDirective.prototype.ngModel;
    /** @type {?} */
    AngularFittextDirective.prototype.fontUnit;
    /** @type {?} */
    AngularFittextDirective.prototype.fittextParent;
    /** @type {?} */
    AngularFittextDirective.prototype.fittextElement;
    /** @type {?} */
    AngularFittextDirective.prototype.fittextMinFontSize;
    /** @type {?} */
    AngularFittextDirective.prototype.fittextMaxFontSize;
    /** @type {?} */
    AngularFittextDirective.prototype.computed;
    /** @type {?} */
    AngularFittextDirective.prototype.newlines;
    /** @type {?} */
    AngularFittextDirective.prototype.lineHeight;
    /** @type {?} */
    AngularFittextDirective.prototype.display;
    /** @type {?} */
    AngularFittextDirective.prototype.calcSize;
    /** @type {?} */
    AngularFittextDirective.prototype.resizeTimeout;
    /** @type {?} */
    AngularFittextDirective.prototype.onWindowResize;
    /** @type {?} */
    AngularFittextDirective.prototype.setFontSize;
    /** @type {?} */
    AngularFittextDirective.prototype.calculateNewFontSize;
    /** @type {?} */
    AngularFittextDirective.prototype.setStyles;
    /** @type {?} */
    AngularFittextDirective.prototype.el;
    /** @type {?} */
    AngularFittextDirective.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,